labs(x = "Venue",
y = "Average Runs",
title = "Average First Innings Runs At Venue (2022 Season)") + labs(fill = "Venue") + theme_light() +
theme(axis.text.x = element_text(angle = 90, vjust = 0.5, hjust=1)) + facet_wrap(~season, ncol = 3)
## Average first innings score at each ground this season
sussex_2022 %>%
filter(innings == 1) %>%
group_by(match_id, venue, batting_team) %>%
summarise(all_max_runs = max(cum_runs, na.rm = TRUE)) %>%
group_by(venue) %>%
summarise(par_score_first_innings = median(all_max_runs, na.rm = TRUE)) %>%
ggplot(aes(x = venue, y = par_score_first_innings, fill = venue)) + geom_bar(stat = "identity", colour = "black") +
labs(x = "Venue",
y = "Average Runs",
title = "Average First Innings Runs At Venue (2022 Season)") + labs(fill = "Venue") +
facet_wrap(~season, ncol = 3) + theme_light() +
theme(axis.text.x = element_text(angle = 90, vjust = 0.5, hjust=1))
## Average first innings score at each ground this season
sussex_2022 %>%
filter(innings == 1) %>%
group_by(match_id, venue, batting_team, season) %>%
summarise(all_max_runs = max(cum_runs, na.rm = TRUE)) %>%
group_by(venue, season) %>%
summarise(par_score_first_innings = median(all_max_runs, na.rm = TRUE)) %>%
ggplot(aes(x = venue, y = par_score_first_innings, fill = venue)) + geom_bar(stat = "identity", colour = "black") +
labs(x = "Venue",
y = "Average Runs",
title = "Average First Innings Runs At Venue (2022 Season)") + labs(fill = "Venue") +
facet_wrap(~season, ncol = 3) + theme_light() +
theme(axis.text.x = element_text(angle = 90, vjust = 0.5, hjust=1))
## Average first innings score at each ground this season
sussex_2022 %>%
filter(innings == 1) %>%
group_by(match_id, venue, batting_team, season) %>%
summarise(all_max_runs = max(cum_runs, na.rm = TRUE)) %>%
group_by(venue, season) %>%
summarise(par_score_first_innings = median(all_max_runs, na.rm = TRUE)) %>%
ggplot(aes(x = venue, y = par_score_first_innings, fill = venue)) + geom_bar(stat = "identity", colour = "black") +
labs(x = "Venue",
y = "Average Runs",
title = "Average First Innings Runs At Venue (2022 Season)") + labs(fill = "Venue") +
facet_wrap(~season, ncol = 3) + theme_light() +
theme(axis.text.x = element_text(angle = 90, vjust = 0.5, hjust=1)) +
theme(strip.background =element_rect(fill="black"))+
theme(strip.text = element_text(colour = 'white'))
# Package names
packages <- c("dplyr", "ggplot2", "httr", "jsonlite")
# Install packages not yet installed
installed_packages <- packages %in% rownames(installed.packages())
if (any(installed_packages == FALSE)) {
install.packages(packages[!installed_packages])
}
# Packages loading
invisible(lapply(packages, library, character.only = TRUE))
# Key
key <- "AIzaSyCaW7QZabAS7X8H0HVnWmMSNvZfxw2Wkf0"
channel_id <- "UCxX9wt5FWQUAAz4UrysqK9A"
base <- "https://www.googleapis.com/youtube/v3/"
outputDirectory <- "C:/Users/jeffr/OneDrive/Desktop/Github Activities/YouTubeDataAnalysing/Data Outputs"
setwd(outputDirectory)
# Construct the API call
api_params <- paste(paste0("key=", key), paste0("id=", channel_id), "part=snippet,contentDetails,statistics", sep = "&")
api_call <- paste0(base, "channels", "?", api_params)
api_result <- GET(api_call)
json_result <- content(api_result, "text", encoding="UTF-8")
channel.json <- fromJSON(json_result, flatten = T)
channel.df <- as.data.frame(channel.json)
View(channel.df)
View(channel.df)
playlist_id <- channel.df$contentDetails.relatedPlaylists.uploads
View(channel.df)
playlist_id <- channel.df$items.contentDetails.relatedPlaylists.uploads
# temporary variables
nextPageToken <- ""
upload.df <- NULL
pageInfo <- NULL
# Loop through the playlist while there is still a next page
while (!is.null(nextPageToken)) {
# Construct the API call
api_params <-
paste(paste0("key=", key),
paste0("playlistId=", playlist_id),
"part=snippet,contentDetails,status",
"maxResults=50",
sep = "&")
# Add the page token for page 2 onwards
if (nextPageToken != "") {
api_params <- paste0(api_params,
"&pageToken=",nextPageToken)
}
api_call <- paste0(base, "playlistItems", "?", api_params)
api_result <- GET(api_call)
json_result <- content(api_result, "text", encoding="UTF-8")
upload.json <- fromJSON(json_result, flatten = T)
nextPageToken <- upload.json$nextPageToken
pageInfo <- upload.json$pageInfo
curr.df <- as.data.frame(upload.json$items)
if (is.null(upload.df)) {
upload.df <- curr.df
} else {
upload.df <- bind_rows(upload.df, curr.df)
}
}
View(upload.df)
video.df<- NULL
# Loop through all uploaded videos
for (i in 1:nrow(upload.df)) {
# Construct the API call
video_id <- upload.df$contentDetails.videoId[i]
api_params <-
paste(paste0("key=", key),
paste0("id=", video_id),
"part=id,statistics,contentDetails",
sep = "&")
api_call <- paste0(base, "videos", "?", api_params)
api_result <- GET(api_call)
json_result <- content(api_result, "text", encoding="UTF-8")
video.json <- fromJSON(json_result, flatten = T)
curr.df <- as.data.frame(video.json$items)
if (is.null(video.df)) {
video.df <- curr.df
} else {
video.df <- bind_rows(video.df, curr.df)
}
}
View(video.df)
# Combine all video data frames
video.df$contentDetails.videoId <- video.df$id
video_final.df <- merge(x = upload.df,
y = video.df,
by = "contentDetails.videoId")
View(video_final.df)
key <- "AIzaSyCaW7QZabAS7X8H0HVnWmMSNvZfxw2Wkf0"
channel_id <- "UCkhh_JEXUpT9mAJHOATkIeg"
base <- "https://www.googleapis.com/youtube/v3/"
outputDirectory <- "C:/Users/jeffr/OneDrive/Desktop/Github Activities/YouTubeDataAnalysing/Data Outputs"
setwd(outputDirectory)
# Construct the API call
api_params <- paste(paste0("key=", key), paste0("id=", channel_id), "part=snippet,contentDetails,statistics", sep = "&")
api_call <- paste0(base, "channels", "?", api_params)
api_result <- GET(api_call)
json_result <- content(api_result, "text", encoding="UTF-8")
# Process the raw data into a data frame
channel.json <- fromJSON(json_result, flatten = T)
channel.df <- as.data.frame(channel.json)
View(channel.df)
# Key
key <- "AIzaSyCaW7QZabAS7X8H0HVnWmMSNvZfxw2Wkf0"
channel_id <- "UCV0qA-eDDICsRR9rPcnG7tw"
base <- "https://www.googleapis.com/youtube/v3/"
outputDirectory <- "C:/Users/jeffr/OneDrive/Desktop/Github Activities/YouTubeDataAnalysing/Data Outputs"
setwd(outputDirectory)
# Construct the API call
api_params <- paste(paste0("key=", key), paste0("id=", channel_id), "part=snippet,contentDetails,statistics", sep = "&")
api_call <- paste0(base, "channels", "?", api_params)
api_result <- GET(api_call)
json_result <- content(api_result, "text", encoding="UTF-8")
# Process the raw data into a data frame
channel.json <- fromJSON(json_result, flatten = T)
channel.df <- as.data.frame(channel.json)
playlist_id <- channel.df$items.contentDetails.relatedPlaylists.uploads
# temporary variables
nextPageToken <- ""
upload.df <- NULL
pageInfo <- NULL
# Loop through the playlist while there is still a next page
while (!is.null(nextPageToken)) {
# Construct the API call
api_params <-
paste(paste0("key=", key),
paste0("playlistId=", playlist_id),
"part=snippet,contentDetails,status",
"maxResults=50",
sep = "&")
# Add the page token for page 2 onwards
if (nextPageToken != "") {
api_params <- paste0(api_params,
"&pageToken=",nextPageToken)
}
api_call <- paste0(base, "playlistItems", "?", api_params)
api_result <- GET(api_call)
json_result <- content(api_result, "text", encoding="UTF-8")
upload.json <- fromJSON(json_result, flatten = T)
nextPageToken <- upload.json$nextPageToken
pageInfo <- upload.json$pageInfo
curr.df <- as.data.frame(upload.json$items)
if (is.null(upload.df)) {
upload.df <- curr.df
} else {
upload.df <- bind_rows(upload.df, curr.df)
}
}
View(upload.df)
video.df<- NULL
# Loop through all uploaded videos
for (i in 1:nrow(upload.df)) {
# Construct the API call
video_id <- upload.df$contentDetails.videoId[i]
api_params <-
paste(paste0("key=", key),
paste0("id=", video_id),
"part=id,statistics,contentDetails",
sep = "&")
api_call <- paste0(base, "videos", "?", api_params)
api_result <- GET(api_call)
json_result <- content(api_result, "text", encoding="UTF-8")
video.json <- fromJSON(json_result, flatten = T)
curr.df <- as.data.frame(video.json$items)
if (is.null(video.df)) {
video.df <- curr.df
} else {
video.df <- bind_rows(video.df, curr.df)
}
}
View(video.df)
video.df$contentDetails.videoId <- video.df$id
video_final.df <- merge(x = upload.df,
y = video.df,
by = "contentDetails.videoId")
View(video_final.df)
# Key
key <- YOUTUBE_KEY
# Key
key <- "YOUTUBE_KEY"
channel_id <- "UCV0qA-eDDICsRR9rPcnG7tw"
base <- "https://www.googleapis.com/youtube/v3/"
outputDirectory <- "C:/Users/jeffr/OneDrive/Desktop/Github Activities/YouTubeDataAnalysing/Data Outputs"
setwd(outputDirectory)
# Construct the API call
api_params <- paste(paste0("key=", key), paste0("id=", channel_id), "part=snippet,contentDetails,statistics", sep = "&")
api_call <- paste0(base, "channels", "?", api_params)
api_result <- GET(api_call)
json_result <- content(api_result, "text", encoding="UTF-8")
# Process the raw data into a data frame
channel.json <- fromJSON(json_result, flatten = T)
channel.df <- as.data.frame(channel.json)
playlist_id <- channel.df$items.contentDetails.relatedPlaylists.uploads
# temporary variables
nextPageToken <- ""
upload.df <- NULL
pageInfo <- NULL
# Loop through the playlist while there is still a next page
while (!is.null(nextPageToken)) {
# Construct the API call
api_params <-
paste(paste0("key=", key),
paste0("playlistId=", playlist_id),
"part=snippet,contentDetails,status",
"maxResults=50",
sep = "&")
# Add the page token for page 2 onwards
if (nextPageToken != "") {
api_params <- paste0(api_params,
"&pageToken=",nextPageToken)
}
api_call <- paste0(base, "playlistItems", "?", api_params)
api_result <- GET(api_call)
json_result <- content(api_result, "text", encoding="UTF-8")
upload.json <- fromJSON(json_result, flatten = T)
nextPageToken <- upload.json$nextPageToken
pageInfo <- upload.json$pageInfo
curr.df <- as.data.frame(upload.json$items)
if (is.null(upload.df)) {
upload.df <- curr.df
} else {
upload.df <- bind_rows(upload.df, curr.df)
}
}
video.df<- NULL
# Loop through all uploaded videos
for (i in 1:nrow(upload.df)) {
# Construct the API call
video_id <- upload.df$contentDetails.videoId[i]
api_params <-
paste(paste0("key=", key),
paste0("id=", video_id),
"part=id,statistics,contentDetails",
sep = "&")
api_call <- paste0(base, "videos", "?", api_params)
api_result <- GET(api_call)
json_result <- content(api_result, "text", encoding="UTF-8")
video.json <- fromJSON(json_result, flatten = T)
curr.df <- as.data.frame(video.json$items)
if (is.null(video.df)) {
video.df <- curr.df
} else {
video.df <- bind_rows(video.df, curr.df)
}
}
# Combine all video data frames
video.df$contentDetails.videoId <- video.df$id
video_final.df <- merge(x = upload.df,
y = video.df,
by = "contentDetails.videoId")
# Key
key <- "YOUTUBE_KEY"
channel_id <- "UCV0qA-eDDICsRR9rPcnG7tw"
base <- "https://www.googleapis.com/youtube/v3/"
outputDirectory <- "C:/Users/jeffr/OneDrive/Desktop/Github Activities/YouTubeDataAnalysing/Data Outputs"
setwd(outputDirectory)
# Construct the API call
api_params <- paste(paste0("key=", key), paste0("id=", channel_id), "part=snippet,contentDetails,statistics", sep = "&")
api_call <- paste0(base, "channels", "?", api_params)
api_result <- GET(api_call)
json_result <- content(api_result, "text", encoding="UTF-8")
# Process the raw data into a data frame
channel.json <- fromJSON(json_result, flatten = T)
channel.df <- as.data.frame(channel.json)
playlist_id <- channel.df$items.contentDetails.relatedPlaylists.uploads
# temporary variables
nextPageToken <- ""
upload.df <- NULL
pageInfo <- NULL
# Loop through the playlist while there is still a next page
while (!is.null(nextPageToken)) {
# Construct the API call
api_params <-
paste(paste0("key=", key),
paste0("playlistId=", playlist_id),
"part=snippet,contentDetails,status",
"maxResults=50",
sep = "&")
# Add the page token for page 2 onwards
if (nextPageToken != "") {
api_params <- paste0(api_params,
"&pageToken=",nextPageToken)
}
api_call <- paste0(base, "playlistItems", "?", api_params)
api_result <- GET(api_call)
json_result <- content(api_result, "text", encoding="UTF-8")
upload.json <- fromJSON(json_result, flatten = T)
nextPageToken <- upload.json$nextPageToken
pageInfo <- upload.json$pageInfo
curr.df <- as.data.frame(upload.json$items)
if (is.null(upload.df)) {
upload.df <- curr.df
} else {
upload.df <- bind_rows(upload.df, curr.df)
}
}
video.df<- NULL
# Loop through all uploaded videos
for (i in 1:nrow(upload.df)) {
# Construct the API call
video_id <- upload.df$contentDetails.videoId[i]
api_params <-
paste(paste0("key=", key),
paste0("id=", video_id),
"part=id,statistics,contentDetails",
sep = "&")
api_call <- paste0(base, "videos", "?", api_params)
api_result <- GET(api_call)
json_result <- content(api_result, "text", encoding="UTF-8")
video.json <- fromJSON(json_result, flatten = T)
curr.df <- as.data.frame(video.json$items)
if (is.null(video.df)) {
video.df <- curr.df
} else {
video.df <- bind_rows(video.df, curr.df)
}
}
# Combine all video data frames
video.df$contentDetails.videoId <- video.df$id
video_final.df <- merge(x = upload.df,
y = video.df,
by = "contentDetails.videoId")
# Key
key <- Sys.getenv("YOUTUBE_KEY")
# Key
key <- Sys.getenv("YOUTUBE_KEY")
channel_id <- "UCV0qA-eDDICsRR9rPcnG7tw"
base <- "https://www.googleapis.com/youtube/v3/"
outputDirectory <- "C:/Users/jeffr/OneDrive/Desktop/Github Activities/YouTubeDataAnalysing/Data Outputs"
setwd(outputDirectory)
# Construct the API call
api_params <- paste(paste0("key=", key), paste0("id=", channel_id), "part=snippet,contentDetails,statistics", sep = "&")
api_call <- paste0(base, "channels", "?", api_params)
api_result <- GET(api_call)
json_result <- content(api_result, "text", encoding="UTF-8")
# Process the raw data into a data frame
channel.json <- fromJSON(json_result, flatten = T)
channel.df <- as.data.frame(channel.json)
playlist_id <- channel.df$items.contentDetails.relatedPlaylists.uploads
# temporary variables
nextPageToken <- ""
upload.df <- NULL
pageInfo <- NULL
# Loop through the playlist while there is still a next page
while (!is.null(nextPageToken)) {
# Construct the API call
api_params <-
paste(paste0("key=", key),
paste0("playlistId=", playlist_id),
"part=snippet,contentDetails,status",
"maxResults=50",
sep = "&")
# Add the page token for page 2 onwards
if (nextPageToken != "") {
api_params <- paste0(api_params,
"&pageToken=",nextPageToken)
}
api_call <- paste0(base, "playlistItems", "?", api_params)
api_result <- GET(api_call)
json_result <- content(api_result, "text", encoding="UTF-8")
upload.json <- fromJSON(json_result, flatten = T)
nextPageToken <- upload.json$nextPageToken
pageInfo <- upload.json$pageInfo
curr.df <- as.data.frame(upload.json$items)
if (is.null(upload.df)) {
upload.df <- curr.df
} else {
upload.df <- bind_rows(upload.df, curr.df)
}
}
video.df<- NULL
# Loop through all uploaded videos
for (i in 1:nrow(upload.df)) {
# Construct the API call
video_id <- upload.df$contentDetails.videoId[i]
api_params <-
paste(paste0("key=", key),
paste0("id=", video_id),
"part=id,statistics,contentDetails",
sep = "&")
api_call <- paste0(base, "videos", "?", api_params)
api_result <- GET(api_call)
json_result <- content(api_result, "text", encoding="UTF-8")
video.json <- fromJSON(json_result, flatten = T)
curr.df <- as.data.frame(video.json$items)
if (is.null(video.df)) {
video.df <- curr.df
} else {
video.df <- bind_rows(video.df, curr.df)
}
}
# Combine all video data frames
video.df$contentDetails.videoId <- video.df$id
video_final.df <- merge(x = upload.df,
y = video.df,
by = "contentDetails.videoId")
# Key
key <- "AIzaSyCaW7QZabAS7X8H0HVnWmMSNvZfxw2Wkf0"
channel_id <- "UCV0qA-eDDICsRR9rPcnG7tw"
base <- "https://www.googleapis.com/youtube/v3/"
outputDirectory <- "C:/Users/jeffr/OneDrive/Desktop/Github Activities/YouTubeDataAnalysing/Data Outputs"
setwd(outputDirectory)
# Construct the API call
api_params <- paste(paste0("key=", key), paste0("id=", channel_id), "part=snippet,contentDetails,statistics", sep = "&")
api_call <- paste0(base, "channels", "?", api_params)
api_result <- GET(api_call)
json_result <- content(api_result, "text", encoding="UTF-8")
# Process the raw data into a data frame
channel.json <- fromJSON(json_result, flatten = T)
channel.df <- as.data.frame(channel.json)
playlist_id <- channel.df$items.contentDetails.relatedPlaylists.uploads
# temporary variables
nextPageToken <- ""
upload.df <- NULL
pageInfo <- NULL
# Loop through the playlist while there is still a next page
while (!is.null(nextPageToken)) {
# Construct the API call
api_params <-
paste(paste0("key=", key),
paste0("playlistId=", playlist_id),
"part=snippet,contentDetails,status",
"maxResults=50",
sep = "&")
# Add the page token for page 2 onwards
if (nextPageToken != "") {
api_params <- paste0(api_params,
"&pageToken=",nextPageToken)
}
api_call <- paste0(base, "playlistItems", "?", api_params)
api_result <- GET(api_call)
json_result <- content(api_result, "text", encoding="UTF-8")
upload.json <- fromJSON(json_result, flatten = T)
nextPageToken <- upload.json$nextPageToken
pageInfo <- upload.json$pageInfo
curr.df <- as.data.frame(upload.json$items)
if (is.null(upload.df)) {
upload.df <- curr.df
} else {
upload.df <- bind_rows(upload.df, curr.df)
}
}
video.df<- NULL
# Loop through all uploaded videos
for (i in 1:nrow(upload.df)) {
# Construct the API call
video_id <- upload.df$contentDetails.videoId[i]
api_params <-
paste(paste0("key=", key),
paste0("id=", video_id),
"part=id,statistics,contentDetails",
sep = "&")
api_call <- paste0(base, "videos", "?", api_params)
api_result <- GET(api_call)
json_result <- content(api_result, "text", encoding="UTF-8")
video.json <- fromJSON(json_result, flatten = T)
curr.df <- as.data.frame(video.json$items)
if (is.null(video.df)) {
video.df <- curr.df
} else {
video.df <- bind_rows(video.df, curr.df)
}
}
# Combine all video data frames
video.df$contentDetails.videoId <- video.df$id
video_final.df <- merge(x = upload.df,
y = video.df,
by = "contentDetails.videoId")
